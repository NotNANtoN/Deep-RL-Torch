Andrey Kolishchak for VizDoom: 
 self.conv1 = nn.Conv2d(in_channels=in_channels, out_channels=16, kernel_size=3, stride=2)
        self.conv2 = nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=2)
        self.conv3 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=2)
        self.conv4 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=2)
        self.conv5 = nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, stride=2)
self.conv6 = nn.Conv2d(in_channels=256, out_channels=512, kernel_size=3, stride=2)

Mnih et al and Malmo Phd(Bacon Gulch) 1st price:
        Convolution(32, (8, 8)) 
        Convolution(64, (4, 4)) 
        Convolution(64, (2, 2))
        Dense(512)
        
Deep RL to play FPS games: (Doom)
Input: RGB 60x108
Conv1: 32 filters (8,8), stride 4
Conv2: 64 filters (4,4), stride 2

Mnih 2015:
Conv2d(32, (8, 8), stride=4) ReLU
Conv2d(64, (4, 4), stride=2) ReLU
Conv2d(64, (3, 3), stride=1) ReLU

Impala Architecture won the unity RL challenge.
also used fixup initialization.
